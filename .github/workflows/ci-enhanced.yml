name: CI - Enhanced Test and Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'

jobs:
  # Quick code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy bandit safety
    
    - name: Run Black formatter check
      run: black --check src/ tests/
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
    
    - name: Type check with mypy
      run: mypy src --ignore-missing-imports --no-strict-optional
    
    - name: Security check with bandit
      run: bandit -r src -f json -o bandit-report.json || true
    
    - name: Check dependencies with safety
      run: safety check --json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json

  # Parallel test execution
  test:
    name: Test Suite - ${{ matrix.test-type }}
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      fail-fast: false
      matrix:
        test-type: [unit, integration, security]
        include:
          - test-type: unit
            test-path: "tests -m 'not integration and not e2e and not performance and not security and not slow'"
            coverage-flags: unit
          - test-type: integration
            test-path: "tests/integration -m integration"
            coverage-flags: integration
          - test-type: security
            test-path: "tests/security -m security"
            coverage-flags: security
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install -e .
    
    - name: Set up test environment
      run: |
        # Create necessary directories
        mkdir -p data logs
        
        # Set environment variables for testing
        echo "ARGUS_ENV=testing" >> $GITHUB_ENV
        echo "ARGUS_MOCK_MODE=true" >> $GITHUB_ENV
        echo "ARGUS_DATABASE_URL=sqlite:///test.db" >> $GITHUB_ENV
    
    - name: Run ${{ matrix.test-type }} tests
      run: |
        pytest ${{ matrix.test-path }} \
          -v \
          --cov=src \
          --cov-report=xml:coverage-${{ matrix.test-type }}.xml \
          --cov-report=html:htmlcov-${{ matrix.test-type }} \
          --junit-xml=junit-${{ matrix.test-type }}.xml \
          --html=report-${{ matrix.test-type }}.html \
          --self-contained-html
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          junit-${{ matrix.test-type }}.xml
          report-${{ matrix.test-type }}.html
          htmlcov-${{ matrix.test-type }}/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage-${{ matrix.test-type }}.xml
        flags: ${{ matrix.coverage-flags }}
        name: coverage-${{ matrix.test-type }}
        fail_ci_if_error: false

  # Aggregate test results
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v3
      with:
        path: test-artifacts
    
    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          test-artifacts/**/junit-*.xml
        check_name: Test Results Summary
        comment_title: Test Results
    
    - name: Generate coverage badge
      run: |
        # This would typically use a service like shields.io
        echo "Coverage analysis complete"

  # Performance benchmarking
  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install pytest-benchmark
        pip install -e .
    
    - name: Run benchmarks
      run: |
        pytest tests/performance/benchmarks/ \
          --benchmark-only \
          --benchmark-json=benchmark-results.json \
          --benchmark-save=current \
          --benchmark-save-data \
          --benchmark-warmup=on \
          --benchmark-disable-gc
    
    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        alert-threshold: '110%'
        comment-on-alert: true
        fail-on-alert: false
        alert-comment-cc-users: '@${{ github.actor }}'

  # Docker build with improved caching
  build:
    name: Build Multi-Architecture Docker Images
    runs-on: ubuntu-latest
    needs: test-summary
    
    permissions:
      contents: read
      packages: write
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/amd64,linux/arm64,linux/arm/v7
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:master
          network=host
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ steps.meta.outputs.version }}
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        vuln-type: 'os,library'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        format: cyclonedx-json
        output-file: sbom.cyclonedx.json
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.cyclonedx.json
    
    - name: Sign container image
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build.outputs.digest }}

  # Dependency scanning
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'argus-scanner'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
    
    - name: Upload dependency check results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-check-report
        path: reports/

  # CodeQL analysis
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"