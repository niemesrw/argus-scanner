name: Deploy with Docker

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - local
      target_host:
        description: 'Target host (leave empty for default)'
        required: false
        type: string
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string
  push:
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Pre-deployment checks
  pre-deploy-check:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      deploy_version: ${{ steps.version.outputs.version }}
      target_host: ${{ steps.target.outputs.host }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "push" ] && [ "${{ startsWith(github.ref, 'refs/tags/v') }}" == "true" ]; then
          VERSION="${GITHUB_REF#refs/tags/}"
        elif [ -n "${{ github.event.inputs.version }}" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="main"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Deploying version: $VERSION"
    
    - name: Determine target host
      id: target
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
        
        if [ -n "${{ github.event.inputs.target_host }}" ]; then
          HOST="${{ github.event.inputs.target_host }}"
        else
          case $ENVIRONMENT in
            staging)
              HOST="${{ secrets.STAGING_HOST || secrets.PI_HOST }}"
              ;;
            production)
              HOST="${{ secrets.PI_HOST }}"
              ;;
            local)
              HOST="localhost"
              ;;
            *)
              HOST="${{ secrets.PI_HOST }}"
              ;;
          esac
        fi
        
        echo "host=$HOST" >> $GITHUB_OUTPUT
        echo "Target host: $HOST"
    
    - name: Check if image exists
      run: |
        docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} || \
        (echo "Image not found!" && exit 1)
    
    - name: Test SSH connection (if not local)
      if: steps.target.outputs.host != 'localhost'
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.PI_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ steps.target.outputs.host }} >> ~/.ssh/known_hosts || true
        
        # Test connection
        ssh -o ConnectTimeout=10 ${{ secrets.PI_USERNAME }}@${{ steps.target.outputs.host }} "echo 'SSH connection successful'" || \
        (echo "SSH connection failed!" && exit 1)

  # Deploy to staging/development
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: pre-deploy-check
    if: github.event.inputs.environment == 'staging' || contains(github.ref, '-rc')
    environment:
      name: staging
      url: http://${{ needs.pre-deploy-check.outputs.target_host }}:8080
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up SSH
      if: needs.pre-deploy-check.outputs.target_host != 'localhost'
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.PI_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ needs.pre-deploy-check.outputs.target_host }} >> ~/.ssh/known_hosts
    
    - name: Prepare deployment files
      run: |
        mkdir -p deployment
        
        # Create docker-compose for staging
        cat > deployment/docker-compose.staging.yml << 'EOF'
        version: '3.8'
        
        services:
          argus:
            image: ${REGISTRY}/${IMAGE_NAME}:${VERSION}
            container_name: argus-scanner-staging
            restart: unless-stopped
            ports:
              - "8080:8080"
            environment:
              - ARGUS_ENV=staging
              - ARGUS_MOCK_MODE=false
              - ARGUS_LOG_LEVEL=DEBUG
              - ARGUS_NETWORK_RANGE=${ARGUS_NETWORK_RANGE}
              - ARGUS_SECRET_KEY=${ARGUS_SECRET_KEY}
              - ARGUS_DATABASE_URL=sqlite:///app/data/argus-staging.db
              - ARGUS_ENABLE_EMAIL_ALERTS=${ARGUS_ENABLE_EMAIL_ALERTS:-false}
              - ARGUS_SMTP_HOST=${ARGUS_SMTP_HOST}
              - ARGUS_SMTP_PORT=${ARGUS_SMTP_PORT:-587}
              - ARGUS_SMTP_USERNAME=${ARGUS_SMTP_USERNAME}
              - ARGUS_SMTP_PASSWORD=${ARGUS_SMTP_PASSWORD}
              - ARGUS_ALERT_FROM=${ARGUS_ALERT_FROM}
              - ARGUS_ALERT_TO=${ARGUS_ALERT_TO}
              - ARGUS_SLACK_WEBHOOK=${ARGUS_SLACK_WEBHOOK}
              - ARGUS_SCAN_INTERVAL=600  # 10 minutes for staging
            volumes:
              - argus_data_staging:/app/data
              - argus_logs_staging:/app/logs
            networks:
              - argus_network
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
        
        networks:
          argus_network:
            driver: bridge
        
        volumes:
          argus_data_staging:
          argus_logs_staging:
        EOF
        
        # Create environment file template
        cat > deployment/.env.staging << 'EOF'
        REGISTRY=${{ env.REGISTRY }}
        IMAGE_NAME=${{ env.IMAGE_NAME }}
        VERSION=${{ needs.pre-deploy-check.outputs.deploy_version }}
        ARGUS_NETWORK_RANGE=${{ secrets.PI_NETWORK_RANGE || '192.168.1.0/24' }}
        ARGUS_SECRET_KEY=${{ secrets.STAGING_SECRET_KEY || 'staging-secret-change-me' }}
        ARGUS_ENABLE_EMAIL_ALERTS=false
        ARGUS_SMTP_HOST=${{ secrets.SMTP_HOST }}
        ARGUS_SMTP_PORT=${{ secrets.SMTP_PORT || '587' }}
        ARGUS_SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}
        ARGUS_SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
        ARGUS_ALERT_FROM=${{ secrets.ALERT_FROM }}
        ARGUS_ALERT_TO=${{ secrets.ALERT_TO }}
        ARGUS_SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK }}
        EOF
    
    - name: Deploy to staging host
      if: needs.pre-deploy-check.outputs.target_host != 'localhost'
      run: |
        # Copy files to target host
        scp -r deployment/* ${{ secrets.PI_USERNAME }}@${{ needs.pre-deploy-check.outputs.target_host }}:/home/${{ secrets.PI_USERNAME }}/argus-staging/
        
        # Deploy on target host
        ssh ${{ secrets.PI_USERNAME }}@${{ needs.pre-deploy-check.outputs.target_host }} << 'EOF'
          cd /home/${{ secrets.PI_USERNAME }}/argus-staging
          
          # Update environment file with actual version
          sed -i "s/VERSION=main/VERSION=${{ needs.pre-deploy-check.outputs.deploy_version }}/" .env.staging
          
          # Pull latest image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deploy-check.outputs.deploy_version }}
          
          # Stop existing staging container
          docker-compose -f docker-compose.staging.yml --env-file .env.staging down || true
          
          # Start new container
          docker-compose -f docker-compose.staging.yml --env-file .env.staging up -d
          
          # Clean up old images
          docker image prune -f
          
          # Wait for container to be ready
          sleep 30
          
          # Check container status
          docker-compose -f docker-compose.staging.yml --env-file .env.staging ps
        EOF
    
    - name: Verify staging deployment
      run: |
        # Wait for service to be ready
        sleep 45
        
        # Check health endpoint
        for i in {1..5}; do
          if curl -f http://${{ needs.pre-deploy-check.outputs.target_host }}:8080/health; then
            echo "Health check $i passed"
            break
          else
            echo "Health check $i failed, retrying..."
            if [ $i -eq 5 ]; then exit 1; fi
            sleep 10
          fi
        done
        
        echo "✅ Staging deployment successful"

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deploy-check, deploy-staging]
    if: |
      always() && 
      (needs.deploy-staging.result == 'success' || needs.deploy-staging.result == 'skipped') &&
      (github.event.inputs.environment == 'production' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')))
    environment:
      name: production
      url: http://${{ needs.pre-deploy-check.outputs.target_host }}:8080
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.PI_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ needs.pre-deploy-check.outputs.target_host }} >> ~/.ssh/known_hosts
    
    - name: Prepare production deployment
      run: |
        mkdir -p deployment
        
        # Create production docker-compose
        cat > deployment/docker-compose.prod.yml << 'EOF'
        version: '3.8'
        
        services:
          argus:
            image: ${REGISTRY}/${IMAGE_NAME}:${VERSION}
            container_name: argus-scanner
            restart: always
            ports:
              - "8080:8080"
            environment:
              - ARGUS_ENV=production
              - ARGUS_MOCK_MODE=false
              - ARGUS_LOG_LEVEL=INFO
              - ARGUS_NETWORK_RANGE=${ARGUS_NETWORK_RANGE}
              - ARGUS_SECRET_KEY=${ARGUS_SECRET_KEY}
              - ARGUS_DATABASE_URL=sqlite:///app/data/argus.db
              - ARGUS_ENABLE_EMAIL_ALERTS=${ARGUS_ENABLE_EMAIL_ALERTS:-true}
              - ARGUS_SMTP_HOST=${ARGUS_SMTP_HOST}
              - ARGUS_SMTP_PORT=${ARGUS_SMTP_PORT:-587}
              - ARGUS_SMTP_USERNAME=${ARGUS_SMTP_USERNAME}
              - ARGUS_SMTP_PASSWORD=${ARGUS_SMTP_PASSWORD}
              - ARGUS_ALERT_FROM=${ARGUS_ALERT_FROM}
              - ARGUS_ALERT_TO=${ARGUS_ALERT_TO}
              - ARGUS_SLACK_WEBHOOK=${ARGUS_SLACK_WEBHOOK}
              - ARGUS_SCAN_INTERVAL=300  # 5 minutes
              - ARGUS_MAX_CONCURRENT_SCANS=3
            volumes:
              - argus_data:/app/data
              - argus_logs:/app/logs
            networks:
              - argus_network
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 60s
            logging:
              driver: "json-file"
              options:
                max-size: "100m"
                max-file: "5"
        
        networks:
          argus_network:
            driver: bridge
        
        volumes:
          argus_data:
          argus_logs:
        EOF
        
        # Create backup script
        cat > deployment/backup.sh << 'EOF'
        #!/bin/bash
        set -e
        
        BACKUP_DIR="/home/$USER/argus-backups"
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        
        mkdir -p $BACKUP_DIR
        
        echo "Creating backup at $TIMESTAMP"
        
        # Backup database
        docker exec argus-scanner sqlite3 /app/data/argus.db ".backup /app/data/argus_backup_$TIMESTAMP.db"
        docker cp argus-scanner:/app/data/argus_backup_$TIMESTAMP.db $BACKUP_DIR/
        
        # Backup logs
        docker cp argus-scanner:/app/logs $BACKUP_DIR/logs_$TIMESTAMP/
        
        # Keep only last 7 backups
        cd $BACKUP_DIR
        ls -t *.db | tail -n +8 | xargs -r rm
        ls -td logs_* | tail -n +8 | xargs -r rm -rf
        
        echo "Backup completed: $BACKUP_DIR"
        EOF
        chmod +x deployment/backup.sh
    
    - name: Backup current production (if exists)
      run: |
        ssh ${{ secrets.PI_USERNAME }}@${{ needs.pre-deploy-check.outputs.target_host }} << 'EOF'
          if docker ps --format '{{.Names}}' | grep -q "argus-scanner"; then
            echo "Creating backup of current production deployment..."
            
            # Get current image for potential rollback
            CURRENT_IMAGE=$(docker inspect argus-scanner --format='{{.Config.Image}}' 2>/dev/null || echo "none")
            echo "Current image: $CURRENT_IMAGE" > /tmp/rollback_image.txt
            
            # Backup database if container exists
            if [ -f /home/${{ secrets.PI_USERNAME }}/argus-scanner/backup.sh ]; then
              /home/${{ secrets.PI_USERNAME }}/argus-scanner/backup.sh || true
            fi
          else
            echo "No existing production deployment found"
            echo "none" > /tmp/rollback_image.txt
          fi
        EOF
    
    - name: Deploy to production
      run: |
        # Copy files to target host
        scp -r deployment/* ${{ secrets.PI_USERNAME }}@${{ needs.pre-deploy-check.outputs.target_host }}:/home/${{ secrets.PI_USERNAME }}/argus-scanner/
        
        # Deploy on target host
        ssh ${{ secrets.PI_USERNAME }}@${{ needs.pre-deploy-check.outputs.target_host }} << 'EOF'
          cd /home/${{ secrets.PI_USERNAME }}/argus-scanner
          
          # Create production environment file
          cat > .env.prod << 'ENVEOF'
        REGISTRY=${{ env.REGISTRY }}
        IMAGE_NAME=${{ env.IMAGE_NAME }}
        VERSION=${{ needs.pre-deploy-check.outputs.deploy_version }}
        ARGUS_NETWORK_RANGE=${{ secrets.PI_NETWORK_RANGE || '192.168.1.0/24' }}
        ARGUS_SECRET_KEY=${{ secrets.ARGUS_SECRET_KEY }}
        ARGUS_ENABLE_EMAIL_ALERTS=${{ secrets.ALERT_EMAIL_ENABLED || 'true' }}
        ARGUS_SMTP_HOST=${{ secrets.SMTP_HOST }}
        ARGUS_SMTP_PORT=${{ secrets.SMTP_PORT || '587' }}
        ARGUS_SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}
        ARGUS_SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
        ARGUS_ALERT_FROM=${{ secrets.ALERT_FROM }}
        ARGUS_ALERT_TO=${{ secrets.ALERT_TO }}
        ARGUS_SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK }}
        ENVEOF
          
          # Pull latest image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deploy-check.outputs.deploy_version }}
          
          # Graceful shutdown of existing container
          if docker ps --format '{{.Names}}' | grep -q "argus-scanner"; then
            echo "Stopping existing container gracefully..."
            docker exec argus-scanner pkill -SIGTERM python || true
            sleep 10
            docker-compose -f docker-compose.prod.yml --env-file .env.prod down || true
          fi
          
          # Start new container
          docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d
          
          # Clean up old images (keep last 3)
          docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --format "{{.ID}} {{.Tag}}" | tail -n +4 | awk '{print $1}' | xargs -r docker rmi || true
          
          # Wait for container to be ready
          sleep 45
          
          # Check container status
          docker-compose -f docker-compose.prod.yml --env-file .env.prod ps
          
          echo "✅ Production deployment completed"
        EOF
    
    - name: Verify production deployment
      id: verify
      run: |
        # Extended health checks
        echo "Performing production health checks..."
        
        # Wait for service to stabilize
        sleep 60
        
        # Multiple health checks
        for i in {1..10}; do
          if curl -f -m 10 http://${{ needs.pre-deploy-check.outputs.target_host }}:8080/health; then
            echo "Health check $i/10 passed"
          else
            echo "Health check $i/10 failed"
            if [ $i -eq 10 ]; then
              echo "All health checks failed!"
              exit 1
            fi
            sleep 15
          fi
        done
        
        # Check API endpoints
        curl -f http://${{ needs.pre-deploy-check.outputs.target_host }}:8080/api/devices || echo "Warning: API endpoint check failed"
        
        echo "✅ Production verification successful"
    
    - name: Rollback on failure
      if: failure() && steps.verify.outcome == 'failure'
      run: |
        echo "⚠️ Production deployment failed, initiating rollback..."
        
        ssh ${{ secrets.PI_USERNAME }}@${{ needs.pre-deploy-check.outputs.target_host }} << 'EOF'
          cd /home/${{ secrets.PI_USERNAME }}/argus-scanner
          
          # Get rollback image
          ROLLBACK_IMAGE=$(cat /tmp/rollback_image.txt 2>/dev/null || echo "none")
          
          if [ "$ROLLBACK_IMAGE" != "none" ]; then
            echo "Rolling back to: $ROLLBACK_IMAGE"
            
            # Stop current container
            docker-compose -f docker-compose.prod.yml --env-file .env.prod down || true
            
            # Update compose file with rollback image
            sed -i "s|image: .*|image: $ROLLBACK_IMAGE|" docker-compose.prod.yml
            
            # Start rollback container
            docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d
            
            sleep 30
            
            # Verify rollback
            if curl -f http://localhost:8080/health; then
              echo "✅ Rollback successful"
            else
              echo "❌ Rollback failed"
              exit 1
            fi
          else
            echo "No previous version available for rollback"
            exit 1
          fi
        EOF
    
    - name: Set up monitoring (if not exists)
      run: |
        ssh ${{ secrets.PI_USERNAME }}@${{ needs.pre-deploy-check.outputs.target_host }} << 'EOF'
          # Create simple monitoring script
          cat > /home/${{ secrets.PI_USERNAME }}/monitor_argus.sh << 'MONEOF'
        #!/bin/bash
        
        # Simple health check and restart if needed
        if ! curl -f -m 10 http://localhost:8080/health >/dev/null 2>&1; then
          echo "$(date): Argus health check failed, restarting container"
          cd /home/${{ secrets.PI_USERNAME }}/argus-scanner
          docker-compose -f docker-compose.prod.yml --env-file .env.prod restart
          sleep 30
          
          # Send alert if restart doesn't help
          if ! curl -f -m 10 http://localhost:8080/health >/dev/null 2>&1; then
            echo "$(date): Argus still unhealthy after restart" | logger -t argus-monitor
          fi
        fi
        MONEOF
          
          chmod +x /home/${{ secrets.PI_USERNAME }}/monitor_argus.sh
          
          # Add to crontab if not already there
          (crontab -l 2>/dev/null | grep -v monitor_argus; echo "*/5 * * * * /home/${{ secrets.PI_USERNAME }}/monitor_argus.sh") | crontab -
        EOF

  # Post-deployment tasks
  post-deploy:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: [pre-deploy-check, deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Send deployment notification
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
        VERSION="${{ needs.pre-deploy-check.outputs.deploy_version }}"
        HOST="${{ needs.pre-deploy-check.outputs.target_host }}"
        
        STATUS="success"
        COLOR="good"
        EMOJI="🚀"
        
        if [ "${{ needs.deploy-production.result }}" == "failure" ] || [ "${{ needs.deploy-staging.result }}" == "failure" ]; then
          STATUS="failed"
          COLOR="danger"
          EMOJI="❌"
        fi
        
        if [ -n "$SLACK_WEBHOOK" ]; then
          curl -X POST $SLACK_WEBHOOK \
            -H 'Content-Type: application/json' \
            -d "{
              \"text\": \"$EMOJI Docker deployment to $ENVIRONMENT $STATUS\",
              \"attachments\": [{
                \"color\": \"$COLOR\",
                \"fields\": [
                  {\"title\": \"Environment\", \"value\": \"$ENVIRONMENT\", \"short\": true},
                  {\"title\": \"Host\", \"value\": \"$HOST\", \"short\": true},
                  {\"title\": \"Version\", \"value\": \"$VERSION\", \"short\": true},
                  {\"title\": \"Status\", \"value\": \"$STATUS\", \"short\": true},
                  {\"title\": \"Deployed by\", \"value\": \"${{ github.actor }}\", \"short\": true},
                  {\"title\": \"URL\", \"value\": \"http://$HOST:8080\", \"short\": true}
                ]
              }]
            }"
        fi
    
    - name: Update deployment status
      uses: actions/github-script@v6
      with:
        script: |
          const environment = '${{ github.event.inputs.environment || 'production' }}';
          const version = '${{ needs.pre-deploy-check.outputs.deploy_version }}';
          const host = '${{ needs.pre-deploy-check.outputs.target_host }}';
          
          // Create deployment record
          await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: version,
            environment: environment,
            description: `Docker deployment ${version} to ${host}`,
            auto_merge: false,
            required_contexts: []
          }).then(async (deployment) => {
            // Create deployment status
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: `http://${host}:8080`,
              description: 'Docker deployment completed successfully'
            });
          }).catch(console.error);